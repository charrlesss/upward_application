{"version":3,"file":"static/js/8019.de7e3498.chunk.js","mappings":"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","sources":["feautures/Admin/Task/Accounting/PostDateChecks.tsx"],"sourcesContent":["import React, { useContext, useState, useRef, useReducer } from \"react\";\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  IconButton,\n  Modal,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  MenuItem,\n  Menu,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { GridRowSelectionModel } from \"@mui/x-data-grid\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport Swal from \"sweetalert2\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { AuthContext } from \"../../../../components/AuthContext\";\nimport CustomDatePicker from \"../../../../components/DatePicker\";\nimport PersonSearchIcon from \"@mui/icons-material/PersonSearch\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport PolicyIcon from \"@mui/icons-material/Policy\";\nimport { NumericFormatCustom } from \"../../../../components/NumberFormat\";\nimport { flushSync } from \"react-dom\";\nimport useQueryModalTable from \"../../../../hooks/useQueryModalTable\";\nimport { LoadingButton } from \"@mui/lab\";\nimport RestartAltIcon from \"@mui/icons-material/RestartAlt\";\nimport Table from \"../../../../components/Table\";\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport {\n  codeCondfirmationAlert,\n  saveCondfirmationAlert,\n} from \"../../../../lib/confirmationAlert\";\nimport DriveFolderUploadIcon from \"@mui/icons-material/DriveFolderUpload\";\nimport { DisplayFile, checkFile } from \"../Claims/Claims\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { grey } from \"@mui/material/colors\";\n\nconst initialState = {\n  Sub_Ref_No: \"\",\n  Ref_No: \"\",\n  PNo: \"\",\n  IDNo: \"\",\n  Date: new Date(),\n  Name: \"\",\n  Remarks: \"\",\n  PDC_Status: \"\",\n  Deposit_Slip: \"\",\n  DateDeposit: \"\",\n  OR_No: \"\",\n  search: \"\",\n  pdcMode: \"\",\n  checkMode: \"\",\n  sub_account: \"\",\n  Acronym: \"\",\n};\nconst modalPdcCheckInititalState = {\n  CheckIdx: \"0\",\n  BankName: \"\",\n  BankCode: \"\",\n  Branch: \"\",\n  Check_Date: new Date(),\n  Check_No: \"\",\n  Check_Amnt: \"\",\n  Check_Remarks: \"\",\n  Check_Count: \"\",\n};\nexport const reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"UPDATE_FIELD\":\n      return {\n        ...state,\n        [action.field]: action.value,\n      };\n    default:\n      return state;\n  }\n};\nexport const pdcColumn = [\n  { field: \"Check_No\", headerName: \"Check No.\", width: 150 },\n  { field: \"Check_Date\", headerName: \"Check Date\", width: 150 },\n  { field: \"Check_Amnt\", headerName: \"Amount\", width: 150, type: \"number\" },\n  { field: \"BankName\", headerName: \"Bank\", width: 150 },\n  { field: \"Branch\", headerName: \"Branch\", width: 150 },\n  {\n    field: \"Check_Remarks\",\n    headerName: \"Checked Remarks\",\n    flex: 1,\n    minWidth: 350,\n  },\n  { field: \"Deposit_Slip\", headerName: \"Deposit Slip\", width: 150 },\n  { field: \"DateDeposit\", headerName: \"Date Deposit\", width: 150 },\n  { field: \"OR_No\", headerName: \"OR Num\", width: 150 },\n  { field: \"BankCode\", headerName: \"Bank Code\", width: 150, hide: true },\n];\nexport const pdcSearchColumn = [\n  { field: \"Date\", headerName: \"Date Received\", width: 160 },\n  { field: \"Ref_No\", headerName: \"Ref No.\", width: 160 },\n  {\n    field: \"Name\",\n    headerName: \"Name\",\n    flex: 1,\n  },\n];\nexport const pdcBanksColumn = [\n  { field: \"Bank_Code\", headerName: \"Code\", width: 130 },\n  { field: \"Bank\", headerName: \"Bank Name\", flex: 1 },\n];\nconst queryKey = \"pdc\";\nconst quertKeyPDCSearch = \"pdc-search\";\n\nexport default function PostDateChecks() {\n  const refParent = useRef<HTMLDivElement>(null);\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const [isDragging, setIsDragging] = useState(false);\n  const [selectedFiles, setSelectedFiles] = useState<Array<File>>([]);\n  const [pdcDataRows, setPdcDataRows] = useState<GridRowSelectionModel>([]);\n  const [openPdcInputModal, setOpenPdcInputModal] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [stateModalPdcCheck, dispatchModalPdcCheck] = useReducer(\n    reducer,\n    modalPdcCheckInititalState\n  );\n\n  const { myAxios, user } = useContext(AuthContext);\n  const dataGridFunctions = useRef<any>(null);\n  // pdc form save button\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const savePDCButtonRef = useRef<HTMLButtonElement>(null);\n  const openIdsButtonRef = useRef<HTMLButtonElement>(null);\n  //check modal refs\n  const checkNoRef = useRef<HTMLInputElement>(null);\n  const checkBankRef = useRef<HTMLInputElement>(null);\n  const checkBranchRef = useRef<HTMLInputElement>(null);\n  const checkAmountRef = useRef<HTMLInputElement>(null);\n  const checkDateRef = useRef<HTMLInputElement>(null);\n  const checkModalSaveButton = useRef<HTMLButtonElement>(null);\n  const checkModalSaveButtonActionRef = useRef<any>(null);\n  // search modal auto focus on load\n  const pdcSearchInput = useRef<HTMLInputElement>(null);\n  const bankSearchInput = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n  const table = useRef<any>(null);\n  const { isLoading: newRefNumberLoading, refetch: refetchNewRefNumber } =\n    useQuery({\n      queryKey: \"new-ref-number\",\n      queryFn: async () => {\n        return await myAxios.get(\"/task/accounting/pdc-new-ref-number\", {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        });\n      },\n      refetchOnWindowFocus: false,\n      onSuccess: (res) => {\n        const response = res as any;\n\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Ref_No\",\n          value: response.data.RefNo[0].pdcID,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Sub_Ref_No\",\n          value: response.data.RefNo[0].pdcID,\n        });\n      },\n    });\n  const { mutate, isLoading: loadingAddNew } = useMutation({\n    mutationKey: queryKey,\n    mutationFn: async (variables: any) => {\n      if (state.pdcMode === \"update\") {\n        delete variables.mode;\n        return await myAxios.post(\"/task/accounting/update-pdc\", variables, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        });\n      }\n      delete variables.mode;\n      return await myAxios.post(\"/task/accounting/add-pdc\", variables, {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      });\n    },\n    onSuccess: (res) => {\n      if (res.data.success) {\n        refetchNewRefNumber();\n        queryClient.invalidateQueries(quertKeyPDCSearch);\n        setNewStateValue(dispatch, initialState);\n        setPdcDataRows([]);\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"pdcMode\",\n          value: \"\",\n        });\n\n        return Swal.fire({\n          position: \"center\",\n          icon: \"success\",\n          title: res.data.message,\n          showConfirmButton: false,\n          timer: 1500,\n        });\n      }\n\n      Swal.fire({\n        position: \"center\",\n        icon: \"error\",\n        title: res.data.message,\n        showConfirmButton: false,\n        timer: 1500,\n      });\n    },\n  });\n  //selecte search\n  const { mutate: mutateSelectedSearch, isLoading: isLoadingSelectedSearch } =\n    useMutation({\n      mutationKey: queryKey,\n      mutationFn: async (variables: any) =>\n        await myAxios.post(\"/task/accounting/get-search-pdc-check\", variables, {\n          headers: {\n            Authorization: `Bearer ${user?.accessToken}`,\n          },\n        }),\n      onSuccess: async (res) => {\n        if (!res?.data.success) {\n          return alert(`Error : ${res?.data.message}`);\n        }\n        const response = res as any;\n        const Ref_No = response.data.getSearchPDCCheck[0].Ref_No;\n        if (response.data.upload[0]) {\n          const uploadFiles = JSON.parse(response.data.upload[0]?.upload);\n          const newObjContainerBasic = await formatDataToDocument(\n            uploadFiles,\n            `${process.env.REACT_APP_IMAGE_URL}pdc/${Ref_No}`\n          );\n          const fileSelected = await Promise.all(newObjContainerBasic);\n          setSelectedFiles(fileSelected);\n        }\n        async function formatDataToDocument(\n          dataDocument: Array<any>,\n          url: string\n        ) {\n          const newObjContainer: Array<any> = [];\n          for (let index = 0; index < dataDocument.length; index++) {\n            const basicItem = dataDocument[index];\n            const mainURL = `${url}/${basicItem.uniqueFilename}`;\n            const response = await fetch(mainURL);\n            const blob = await response.blob();\n            const file = new File([blob], basicItem.fileName, {\n              type: basicItem.fileType,\n            });\n            const reader = new FileReader();\n            newObjContainer.push(\n              new Promise((resolve, reject) => {\n                reader.onload = function (event) {\n                  resolve(file);\n                };\n                reader.onerror = function (event) {\n                  reject(new Error(\"Error reading file: \" + file.name));\n                };\n                reader.readAsDataURL(file);\n              })\n            );\n          }\n          return newObjContainer;\n        }\n\n        setPdcDataRows(\n          response.data.getSearchPDCCheck.map((item: any, idx: number) => {\n            return { ...item, CheckIdx: `${idx}` };\n          })\n        );\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Ref_No\",\n          value: response.data.getSearchPDCCheck[0].Ref_No,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Name\",\n          value: response.data.getSearchPDCCheck[0].Name,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Date\",\n          value: response.data.getSearchPDCCheck[0].Date,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"PNo\",\n          value: response.data.getSearchPDCCheck[0].PNo,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"IDNo\",\n          value: response.data.getSearchPDCCheck[0].IDNo,\n        });\n\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Acronym\",\n          value: response.data.getSearchPDCCheck[0].Acronym,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"sub_account\",\n          value: response.data.getSearchPDCCheck[0].sub_account,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"Remarks\",\n          value: response.data.getSearchPDCCheck[0].Remarks,\n        });\n        dispatch({\n          type: \"UPDATE_FIELD\",\n          field: \"pdcMode\",\n          value: \"update\",\n        });\n        closeModalSearchPDC();\n      },\n    });\n  // policy ids search table modal\n  const {\n    ModalComponent: ModalSearchPdcIDs,\n    openModal: openModalSearchPdcIDs,\n    closeModal: closeModalSearchPdcIDs,\n    isLoading: isLoadingModalSearchPdcIDs,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc-policy-id\",\n      queryUrlName: \"searchPdcPolicyIds\",\n    },\n    columns: [\n      { field: \"Type\", headerName: \"Type\", width: 130 },\n      { field: \"IDNo\", headerName: \"ID No.\", width: 200 },\n      { field: \"chassis\", headerName: \"Chassis No.\", width: 200 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        flex: 1,\n      },\n      {\n        field: \"ID\",\n        headerName: \"ID\",\n        width: 300,\n        hide: true,\n      },\n      {\n        field: \"client_id\",\n        headerName: \"client_id\",\n        width: 200,\n        hide: true,\n      },\n    ],\n    queryKey: \"pdc-polidy-ids\",\n    uniqueId: \"IDNo\",\n    responseDataKey: \"clientsId\",\n    onSelected: (selectedRowData) => {\n      console.log(selectedRowData);\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"PNo\",\n        value: selectedRowData[0].IDNo,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"IDNo\",\n        value: selectedRowData[0].client_id,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"Name\",\n        value: selectedRowData[0].Name ?? \"\",\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"Remarks\",\n        value: selectedRowData[0].remarks ?? \"\",\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"sub_account\",\n        value: selectedRowData[0].sub_account,\n      });\n      dispatch({\n        type: \"UPDATE_FIELD\",\n        field: \"Acronym\",\n        value: selectedRowData[0].Acronym,\n      });\n\n      closeModalSearchPdcIDs();\n    },\n    searchRef: pdcSearchInput,\n  });\n  // bank search table modal\n  const {\n    ModalComponent: ModalSearchBanks,\n    openModal: openModalSearchBanks,\n    closeModal: closeModalSearchBanks,\n    isLoading: isLoadingModalSearchbanks,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc-banks\",\n      queryUrlName: \"searchPdcBanks\",\n    },\n    columns: [\n      { field: \"Bank_Code\", headerName: \"Code\", width: 130 },\n      { field: \"Bank\", headerName: \"Bank Name\", flex: 1 },\n    ],\n    queryKey: \"pdc-banks-codes\",\n    uniqueId: \"Bank_Code\",\n    responseDataKey: \"pdcBanks\",\n    onSelected: (selectedRowData) => {\n      dispatchModalPdcCheck({\n        type: \"UPDATE_FIELD\",\n        field: \"BankName\",\n        value: selectedRowData[0].Bank,\n      });\n\n      dispatchModalPdcCheck({\n        type: \"UPDATE_FIELD\",\n        field: \"BankCode\",\n        value: selectedRowData[0].Bank_Code,\n      });\n      closeModalSearchBanks();\n    },\n    searchRef: bankSearchInput,\n  });\n  // pdc search table modal\n  const {\n    ModalComponent: ModalSearchPDC,\n    openModal: openModalSearchPDC,\n    closeModal: closeModalSearchPDC,\n    isLoading: isLoadingModalSearchPDC,\n  } = useQueryModalTable({\n    link: {\n      url: \"/task/accounting/search-pdc\",\n      queryUrlName: \"searchPDCInput\",\n    },\n    columns: [\n      { field: \"Date\", headerName: \"Date Received\", width: 160 },\n      { field: \"Ref_No\", headerName: \"Ref No.\", width: 160 },\n      {\n        field: \"Name\",\n        headerName: \"Name\",\n        flex: 1,\n      },\n    ],\n    queryKey: \"pdc-search\",\n    uniqueId: \"Ref_No\",\n    responseDataKey: \"searchPDC\",\n    onSelected: (selectedRowData) => {\n      mutateSelectedSearch({ ref_no: selectedRowData[0].Ref_No });\n    },\n    onCloseFunction: (value: any) => {\n      dispatch({ type: \"UPDATE_FIELD\", field: \"search\", value });\n    },\n    searchRef: bankSearchInput,\n  });\n  const handleInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatch({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  const handleModalInputChange = (e: any) => {\n    const { name, value } = e.target;\n    dispatchModalPdcCheck({ type: \"UPDATE_FIELD\", field: name, value });\n  };\n  async function handleOnSave(e: any) {\n    if (state.PNo === \"\") {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide loan information!\",\n        timer: 1500,\n      }).then(() => {\n        setTimeout(() => {\n          openIdsButtonRef.current?.click();\n        }, 350);\n      });\n    }\n    if (pdcDataRows.length <= 0) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Please provide entry!\",\n        timer: 1500,\n      }).then(() => {\n        setOpenPdcInputModal(true);\n      });\n    }\n    if (state.PNo.length >= 45) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Pno is too long!\",\n        timer: 1500,\n      });\n    }\n    if (state.Remarks.length >= 220) {\n      return Swal.fire({\n        position: \"center\",\n        icon: \"warning\",\n        title: \"Remarks is too long!\",\n        timer: 1500,\n      });\n    }\n    const filePromises: Array<any> = [];\n    function fileTransfer(filePromises: Array<any>) {\n      const files = selectedFiles;\n      if (files.length > 0) {\n        for (let i = 0; i < files.length; i++) {\n          const file = files[i];\n          const reader = new FileReader();\n          filePromises.push(\n            new Promise((resolve, reject) => {\n              reader.onload = function (event) {\n                resolve({\n                  datakey: \"pdc_file\",\n                  fileName: file.name,\n                  fileContent: event.target?.result,\n                  fileType: file.type,\n                  file,\n                });\n              };\n              reader.onerror = function (event) {\n                reject(new Error(\"Error reading file: \" + file.name));\n              };\n              reader.readAsDataURL(file);\n            })\n          );\n        }\n      }\n    }\n    fileTransfer(filePromises);\n    const fileToSave = await Promise.all(filePromises);\n    const stateSubmited = {\n      Ref_No: state.Ref_No,\n      PNo: state.PNo,\n      IDNo: state.IDNo,\n      Date: state.Date,\n      Name: state.Name,\n      Remarks: state.Remarks,\n      BankCode: state.BankCode,\n      checks: JSON.stringify(pdcDataRows),\n    };\n    if (state.pdcMode === \"update\") {\n      codeCondfirmationAlert({\n        isUpdate: true,\n        cb: (userCodeConfirmation) => {\n          mutate({ ...stateSubmited, userCodeConfirmation, fileToSave });\n        },\n      });\n    } else {\n      saveCondfirmationAlert({\n        isConfirm: () => {\n          mutate({ ...stateSubmited, fileToSave });\n        },\n      });\n    }\n  }\n  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  };\n  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const fileList = e.dataTransfer.files;\n    const files = Array.from(fileList);\n    const newFiles = [...selectedFiles, ...files];\n    setIsDragging(false);\n    if (checkFile(newFiles)) {\n      fileInputRef.current?.click();\n      return alert(\"file is not valid Extention!\");\n    } else {\n      setSelectedFiles(newFiles);\n    }\n  };\n  const clickPDCReceipt = () => {\n    flushSync(() => {\n      localStorage.removeItem(\"printString\");\n      localStorage.setItem(\"dataString\", JSON.stringify(pdcDataRows));\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n      localStorage.setItem(\"module\", \"pdc\");\n      localStorage.setItem(\"state\", JSON.stringify(state));\n      localStorage.setItem(\n        \"column\",\n        JSON.stringify([\n          { datakey: \"Check_No\", header: \"CHECK NO\", width: \"80px\" },\n          { datakey: \"Check_Date\", header: \"DATE\", width: \"130px\" },\n          { datakey: \"BankName\", header: \"BANK\", width: \"240px\" },\n          { datakey: \"Check_Amnt\", header: \"AMOUNT\", width: \"70px\" },\n          { datakey: \"SEQ\", header: \"SEQ\", width: \"30px\" },\n        ])\n      );\n      localStorage.setItem(\n        \"title\",\n        \"UPWARD CONSULTANCY SERVICES AND MANAGEMENT INC.\\n Post Date Checks Receipt\"\n      );\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  };\n  const clickPDCLabeling = () => {\n    let printString = () => {\n      return (\n        <div>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              marginTop: \"8px\",\n              marginBottom: 0,\n            }}\n          >\n            UCSMI\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: 0,\n            }}\n          >\n            {state.Name}\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: 0,\n            }}\n          >\n            {state.IDNo}\n          </p>\n          <p\n            style={{\n              color: \"#d1d5db\",\n              fontSize: \"11px\",\n              textAlign: \"center\",\n              padding: 0,\n              margin: \"20px\",\n            }}\n          >\n            {state.Ref_No}\n          </p>\n        </div>\n      );\n    };\n\n    flushSync(() => {\n      const elementString = ReactDOMServer.renderToString(printString());\n      localStorage.setItem(\"printString\", elementString);\n      localStorage.removeItem(\"dataString\");\n      localStorage.setItem(\"paper-width\", \"8.5in\");\n      localStorage.setItem(\"paper-height\", \"11in\");\n    });\n    window.open(\"/dashboard/print\", \"_blank\");\n  };\n  const isDisableField = state.pdcMode === \"\";\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"100%\",\n        height: \"100%\",\n        flex: 1,\n      }}\n    >\n      <Box\n        sx={(theme) => ({\n          display: \"flex\",\n          alignItems: \"center\",\n          columnGap: \"20px\",\n          [theme.breakpoints.down(\"sm\")]: {\n            flexDirection: \"column\",\n            alignItems: \"flex-start\",\n            flex: 1,\n            marginBottom: \"15px\",\n          },\n        })}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            columnGap: \"5px\",\n            marginBottom: \"15px\",\n          }}\n        >\n          {isLoadingModalSearchPDC ? (\n            <LoadingButton loading={isLoadingModalSearchPDC} />\n          ) : (\n            <TextField\n              label=\"Search\"\n              size=\"small\"\n              name=\"search\"\n              value={state.search}\n              onChange={handleInputChange}\n              onKeyDown={(e) => {\n                if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                  e.preventDefault();\n                  return openModalSearchPDC(\n                    (e.target as HTMLInputElement).value\n                  );\n                }\n              }}\n              InputProps={{\n                style: { height: \"27px\", fontSize: \"14px\" },\n              }}\n              sx={{\n                width: \"300px\",\n                height: \"27px\",\n                \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n              }}\n            />\n          )}\n\n          {state.pdcMode === \"\" && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n              id=\"entry-header-save-button\"\n              color=\"primary\"\n              onClick={() => {\n                dispatch({\n                  type: \"UPDATE_FIELD\",\n                  field: \"pdcMode\",\n                  value: \"add\",\n                });\n              }}\n            >\n              New\n            </Button>\n          )}\n          <LoadingButton\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            ref={savePDCButtonRef}\n            id=\"save-entry-header\"\n            color=\"success\"\n            variant=\"contained\"\n            type=\"submit\"\n            onClick={handleOnSave}\n            disabled={state.pdcMode === \"\"}\n            loading={loadingAddNew}\n            startIcon={<SaveIcon sx={{ width: 15, height: 15 }} />}\n          >\n            Save\n          </LoadingButton>\n          {(state.pdcMode === \"add\" || state.pdcMode === \"update\") && (\n            <Button\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n              }}\n              variant=\"contained\"\n              startIcon={<CloseIcon sx={{ width: 15, height: 15 }} />}\n              onClick={() => {\n                Swal.fire({\n                  title: \"Are you sure?\",\n                  text: \"You won't be able to revert this!\",\n                  icon: \"warning\",\n                  showCancelButton: true,\n                  confirmButtonColor: \"#3085d6\",\n                  cancelButtonColor: \"#d33\",\n                  confirmButtonText: \"Yes, cancel it!\",\n                }).then((result) => {\n                  if (result.isConfirmed) {\n                    initialState.Sub_Ref_No = state.Sub_Ref_No;\n                    initialState.Ref_No = state.Sub_Ref_No;\n                    setNewStateValue(dispatch, initialState);\n                    setPdcDataRows([]);\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"pdcMode\",\n                      value: \"\",\n                    });\n                  }\n                });\n              }}\n              color=\"error\"\n            >\n              Cancel\n            </Button>\n          )}\n          <Button\n            sx={{\n              height: \"30px\",\n              fontSize: \"11px\",\n            }}\n            disabled={state.pdcMode === \"\"}\n            variant=\"contained\"\n            startIcon={<AddIcon sx={{ width: 15, height: 15 }} />}\n            onClick={() => {\n              const getLastCheck_No: any = pdcDataRows[pdcDataRows.length - 1];\n              modalPdcCheckInititalState.Check_No = incrementCheckNo(\n                getLastCheck_No?.Check_No\n              );\n              setNewStateValue(\n                dispatchModalPdcCheck,\n                modalPdcCheckInititalState\n              );\n              dispatch({\n                type: \"UPDATE_FIELD\",\n                field: \"checkMode\",\n                value: \"\",\n              });\n              flushSync(() => {\n                setOpenPdcInputModal(true);\n              });\n\n              if (state.checkMode !== \"update\") {\n                checkNoRef.current?.focus();\n              }\n            }}\n          >\n            Add Check\n          </Button>\n          <div>\n            <Button\n              disabled={state.pdcMode !== \"update\"}\n              id=\"basic-button\"\n              aria-controls={open ? \"basic-menu\" : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? \"true\" : undefined}\n              onClick={handleClick}\n              sx={{\n                height: \"30px\",\n                fontSize: \"11px\",\n                color: \"white\",\n                backgroundColor: grey[600],\n                \"&:hover\": {\n                  backgroundColor: grey[700],\n                },\n              }}\n            >\n              Print\n            </Button>\n            <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{\n                \"aria-labelledby\": \"basic-button\",\n              }}\n            >\n              <MenuItem onClick={clickPDCReceipt}>PDC Receipt</MenuItem>\n              <MenuItem onClick={clickPDCLabeling}>PDC Labeling</MenuItem>\n            </Menu>\n          </div>\n        </div>\n      </Box>\n      <form\n        onKeyDown={(e) => {\n          if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n            e.preventDefault();\n            return;\n          }\n        }}\n      >\n        <Box\n          sx={(theme) => ({\n            display: \"flex\",\n            columnGap: \"15px\",\n            flexDirection: \"row\",\n            [theme.breakpoints.down(\"md\")]: {\n              flexDirection: \"column\",\n              rowGap: \"10px\",\n            },\n          })}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              gap: \"10px\",\n              width: \"100%\",\n            }}\n          >\n            <fieldset\n              style={\n                {\n                  flex: 1,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  gap: \"10px\",\n                  padding: \"15px\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                } as any\n              }\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  gap: \"10px\",\n                }}\n              >\n                {newRefNumberLoading ? (\n                  <LoadingButton loading={newRefNumberLoading} />\n                ) : (\n                  <FormControl\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={isDisableField}\n                    sx={{\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  >\n                    <InputLabel htmlFor=\"pdc-id-field\">\n                      Reference No.\n                    </InputLabel>\n                    <OutlinedInput\n                      sx={{\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                      }}\n                      disabled={isDisableField}\n                      label=\"Reference No.\"\n                      name=\"Ref_No\"\n                      value={state.Ref_No}\n                      onChange={handleInputChange}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          return savePDCButtonRef.current?.click();\n                        }\n                      }}\n                      readOnly={true}\n                      id=\"pdc-id-field\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            disabled={isDisableField}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                            onClick={() => {\n                              refetchNewRefNumber();\n                            }}\n                          >\n                            <RestartAltIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                    />\n                  </FormControl>\n                )}\n                <CustomDatePicker\n                  fullWidth={true}\n                  disabled={isDisableField}\n                  label=\"Date Received\"\n                  onChange={(value: any) => {\n                    dispatch({\n                      type: \"UPDATE_FIELD\",\n                      field: \"Date\",\n                      value: value,\n                    });\n                  }}\n                  value={new Date(state.Date)}\n                  onKeyDown={(e: any) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  textField={{\n                    InputLabelProps: {\n                      style: {\n                        fontSize: \"14px\",\n                      },\n                    },\n                    InputProps: {\n                      style: { height: \"27px\", fontSize: \"14px\" },\n                    },\n                  }}\n                />\n              </div>\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Remarks\"\n                name=\"Remarks\"\n                value={state.Remarks}\n                onChange={handleInputChange}\n                disabled={isDisableField}\n                onKeyDown={(e) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    savePDCButtonRef.current?.click();\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </fieldset>\n            <fieldset\n              style={\n                {\n                  flex: 1,\n                  display: \"flex\",\n                  gap: \"10px\",\n                  padding: \"15px\",\n                  border: \"1px solid #cbd5e1\",\n                  borderRadius: \"5px\",\n                  flexDirection: \"column\",\n                } as any\n              }\n            >\n              <div\n                style={{ width: \"100%\", flex: 1, display: \"flex\", gap: \"10px\" }}\n              >\n                {isLoadingModalSearchPdcIDs ? (\n                  <LoadingButton loading={isLoadingModalSearchPdcIDs} />\n                ) : (\n                  <FormControl\n                    fullWidth\n                    variant=\"outlined\"\n                    size=\"small\"\n                    disabled={isDisableField}\n                    sx={{\n                      flex: 1,\n                      \".MuiFormLabel-root\": {\n                        fontSize: \"14px\",\n                        background: \"white\",\n                        zIndex: 99,\n                        padding: \"0 3px\",\n                      },\n                      \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                    }}\n                  >\n                    <InputLabel htmlFor=\"label-input-id\">\n                      PN/Client ID\n                    </InputLabel>\n                    <OutlinedInput\n                      sx={{\n                        height: \"27px\",\n                        fontSize: \"14px\",\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                          openIdsButtonRef.current?.click();\n                        }\n                      }}\n                      name=\"PNo\"\n                      value={state.PNo}\n                      onChange={handleInputChange}\n                      id=\"label-input-id\"\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            ref={openIdsButtonRef}\n                            disabled={isDisableField}\n                            aria-label=\"search-client\"\n                            color=\"secondary\"\n                            edge=\"end\"\n                            onClick={() => openModalSearchPdcIDs(state.PNo)}\n                          >\n                            <PersonSearchIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      label=\"PN/Client ID\"\n                    />\n                  </FormControl>\n                )}\n                <TextField\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Branch\"\n                  name=\"Acronym\"\n                  value={state.Acronym}\n                  onChange={handleInputChange}\n                  disabled={isDisableField}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    readOnly: true,\n                  }}\n                  sx={{\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              </div>\n              <div\n                style={{ width: \"100%\", display: \"flex\", columnGap: \"10px\" }}\n              >\n                <TextField\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Clients Name\"\n                  name=\"Name\"\n                  value={state.Name}\n                  onChange={handleInputChange}\n                  disabled={isDisableField}\n                  onKeyDown={(e) => {\n                    if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                      savePDCButtonRef.current?.click();\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    readOnly: true,\n                  }}\n                  sx={{\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n                <Button\n                  sx={{\n                    height: \"27px\",\n                    fontSize: \"11px\",\n                  }}\n                  disabled={state.pdcMode === \"\"}\n                  variant=\"contained\"\n                  startIcon={<DownloadIcon sx={{ width: 15, height: 15 }} />}\n                  onClick={() => {\n                    setShowModal(true);\n                  }}\n                >\n                  Upload Check\n                </Button>\n              </div>\n            </fieldset>\n          </Box>\n        </Box>\n      </form>\n      <div\n        ref={refParent}\n        style={{\n          marginTop: \"10px\",\n          width: \"100%\",\n          position: \"relative\",\n          flex: 1,\n        }}\n      >\n        <Box\n          style={{\n            height: `${refParent.current?.getBoundingClientRect().height}px`,\n            width: \"100%\",\n            overflowX: \"scroll\",\n            position: \"absolute\",\n          }}\n        >\n          <Table\n            ref={table}\n            isLoading={loadingAddNew || isLoadingSelectedSearch}\n            columns={pdcColumn}\n            rows={pdcDataRows}\n            table_id={\"CheckIdx\"}\n            isSingleSelection={true}\n            isRowFreeze={false}\n            dataSelection={(selection, data, code) => {\n              const rowSelected = data.filter(\n                (item: any) => item.CheckIdx === selection[0]\n              )[0];\n\n              if (rowSelected === undefined || rowSelected.length <= 0) {\n                dispatch({\n                  type: \"UPDATE_FIELD\",\n                  field: \"checkMode\",\n                  value: \"\",\n                });\n                return;\n              }\n              dispatch({\n                type: \"UPDATE_FIELD\",\n                field: \"checkMode\",\n                value: \"update\",\n              });\n\n              if (code === \"Delete\" || code === \"Backspace\") {\n                if (\n                  (rowSelected.Deposit_Slip &&\n                    rowSelected.Deposit_Slip !== \"\") ||\n                  (rowSelected.DateDeposit && rowSelected.DateDeposit !== \"\") ||\n                  (rowSelected.OR_No && rowSelected.OR_No !== \"\")\n                ) {\n                  return Swal.fire({\n                    position: \"center\",\n                    icon: \"warning\",\n                    title: `Unable to delete. Check No ${rowSelected.Check_No} is already ${rowSelected.OR_No} issued of OR!`,\n                    showConfirmButton: false,\n                    timer: 1500,\n                  });\n                }\n                const timeout = setTimeout(() => {\n                  Swal.fire({\n                    title: \"Are you sure?\",\n                    text: `You won't to delete this Check No. ${rowSelected.Check_No}`,\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    confirmButtonColor: \"#3085d6\",\n                    cancelButtonColor: \"#d33\",\n                    confirmButtonText: \"Yes, delete it!\",\n                  }).then((result) => {\n                    if (result.isConfirmed) {\n                      return setPdcDataRows((dt) => {\n                        return dt.filter(\n                          (item: any) => item.CheckIdx !== rowSelected.CheckIdx\n                        );\n                      });\n                    }\n                    table.current?.removeSelection();\n                  });\n                  clearTimeout(timeout);\n                }, 250);\n                return;\n              }\n              setNewStateValue(dispatchModalPdcCheck, rowSelected);\n              flushSync(() => {\n                setOpenPdcInputModal(true);\n              });\n              checkModalSaveButtonActionRef.current?.focusVisible();\n            }}\n          />\n        </Box>\n      </div>\n      {ModalSearchPdcIDs}\n      {ModalSearchBanks}\n      {ModalSearchPDC}\n      <Modal\n        open={openPdcInputModal}\n        onClose={() => {\n          table.current?.removeSelection();\n          setOpenPdcInputModal(false);\n        }}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box\n          sx={{\n            position: \"absolute\" as \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            width: \"auto\",\n            bgcolor: \"background.paper\",\n            p: 4,\n          }}\n        >\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Check Detail\n          </Typography>\n          <br />\n          <div\n            style={{\n              display: \"flex\",\n              columnGap: \"10px\",\n            }}\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: \"10px\",\n              }}\n            >\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Check No.\"\n                name=\"Check_No\"\n                value={stateModalPdcCheck.Check_No}\n                onChange={handleModalInputChange}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef: checkNoRef,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              {isLoadingModalSearchbanks ? (\n                <LoadingButton loading={isLoadingModalSearchbanks} />\n              ) : (\n                <FormControl\n                  sx={{\n                    width: \"100%\",\n                    \".MuiFormLabel-root\": {\n                      fontSize: \"14px\",\n                      background: \"white\",\n                      zIndex: 99,\n                      padding: \"0 3px\",\n                    },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                  fullWidth\n                  variant=\"outlined\"\n                  size=\"small\"\n                >\n                  <InputLabel htmlFor=\"label-input-id\">Bank</InputLabel>\n                  <OutlinedInput\n                    sx={{\n                      height: \"27px\",\n                      fontSize: \"14px\",\n                    }}\n                    inputRef={checkBankRef}\n                    fullWidth\n                    label=\"Bank\"\n                    name=\"BankName\"\n                    value={stateModalPdcCheck.BankName}\n                    onChange={handleModalInputChange}\n                    id=\"label-input-id\"\n                    onKeyDown={(e) => {\n                      if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                        return openModalSearchBanks(state.BankName);\n                      }\n                    }}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"search-client\"\n                          color=\"secondary\"\n                          edge=\"end\"\n                          onClick={() => openModalSearchBanks(state.BankName)}\n                        >\n                          <PolicyIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                  />\n                </FormControl>\n              )}\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Branch\"\n                name=\"Branch\"\n                value={stateModalPdcCheck.Branch}\n                onChange={handleModalInputChange}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputRef: checkBranchRef,\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Remarks\"\n                name=\"Check_Remarks\"\n                value={stateModalPdcCheck.Check_Remarks}\n                onChange={handleModalInputChange}\n                rows={4}\n                multiline\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"auto\", fontSize: \"14px\" },\n                }}\n                sx={{\n                  flex: 1,\n                  height: \"auto\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                gap: \"10px\",\n                flexDirection: \"column\",\n              }}\n            >\n              <CustomDatePicker\n                label=\"Check Dated\"\n                onChange={(value: any) => {\n                  console.log(value);\n                  dispatchModalPdcCheck({\n                    type: \"UPDATE_FIELD\",\n                    field: \"Check_Date\",\n                    value: value,\n                  });\n                }}\n                value={new Date(stateModalPdcCheck.Check_Date)}\n                inputRef={checkDateRef}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                textField={{\n                  InputLabelProps: {\n                    style: {\n                      fontSize: \"14px\",\n                    },\n                  },\n                  InputProps: {\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                  },\n                }}\n              />\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                label=\"Amount\"\n                name=\"Check_Amnt\"\n                value={stateModalPdcCheck.Check_Amnt}\n                onChange={handleModalInputChange}\n                placeholder=\"0.00\"\n                onBlur={() => {\n                  dispatchModalPdcCheck({\n                    type: \"UPDATE_FIELD\",\n                    field: \"Check_Amnt\",\n                    value: parseFloat(\n                      stateModalPdcCheck.Check_Amnt.replace(/,/g, \"\")\n                    ).toFixed(2),\n                  });\n                }}\n                onKeyDown={(e: any) => {\n                  if (e.code === \"Enter\" || e.code === \"NumpadEnter\") {\n                    const timeout = setTimeout(() => {\n                      checkModalSaveButton.current?.click();\n                      clearTimeout(timeout);\n                    }, 100);\n                  }\n                }}\n                InputProps={{\n                  style: { height: \"27px\", fontSize: \"14px\" },\n                  inputComponent: NumericFormatCustom as any,\n                  inputRef: checkAmountRef,\n                }}\n                sx={{\n                  height: \"27px\",\n                  \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                  \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                }}\n              />\n              {state.checkMode !== \"update\" && (\n                <TextField\n                  type=\"number\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  label=\"Check Count\"\n                  name=\"Check_Count\"\n                  value={stateModalPdcCheck.Check_Count}\n                  onChange={handleModalInputChange}\n                  placeholder=\"0\"\n                  onKeyDown={(e: any) => {\n                    const validCode = [\"Enter\", \"NumpadEnter\"];\n                    if (validCode.includes(e.code)) {\n                      const timeout = setTimeout(() => {\n                        checkModalSaveButton.current?.click();\n                        clearTimeout(timeout);\n                      }, 100);\n                    }\n                  }}\n                  InputProps={{\n                    style: { height: \"27px\", fontSize: \"14px\" },\n                    inputProps: {\n                      min: 1,\n                      type: \"text\",\n                      pattern: \"[0-9]*\",\n                    },\n                  }}\n                  sx={{\n                    flex: 1,\n                    height: \"27px\",\n                    \".MuiFormLabel-root\": { fontSize: \"14px\" },\n                    \".MuiFormLabel-root[data-shrink=false]\": { top: \"-5px\" },\n                  }}\n                />\n              )}\n            </div>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              width: \"100%\",\n              marginTop: \"10px\",\n            }}\n          >\n            <div style={{ display: \"flex\", gap: \"10px\" }}>\n              <Button\n                ref={checkModalSaveButton}\n                action={checkModalSaveButtonActionRef}\n                color=\"primary\"\n                variant=\"contained\"\n                autoFocus={state.checkMode !== \"\"}\n                onClick={() => {\n                  if (state.checkMode === \"update\") {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    return Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `Update Check ${stateModalPdcCheck.Check_No}`,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, update it!\",\n                    }).then((result) => {\n                      if (!result.isConfirmed) {\n                        table.current?.removeSelection();\n                        setOpenPdcInputModal(false);\n                        dispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"checkMode\",\n                          value: \"\",\n                        });\n                        return;\n                      }\n                      modalCheckAddUpdate();\n                    });\n                  }\n                  modalCheckAddUpdate();\n\n                  function modalCheckAddUpdate() {\n                    if (\n                      state.checkMode !== \"update\" &&\n                      pdcDataRows\n                        .map((item: any) => item.Check_No)\n                        .includes(stateModalPdcCheck.Check_No)\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Check is already exist!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      });\n                    }\n\n                    if (stateModalPdcCheck.Check_No === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide check!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkNoRef.current?.focus();\n                      });\n                    }\n                    if (\n                      parseInt(stateModalPdcCheck.Check_Amnt) <= 0 ||\n                      isNaN(parseInt(stateModalPdcCheck.Check_Amnt))\n                    ) {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide check amount!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkAmountRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.BankName === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide bank!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBankRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.Branch === \"\") {\n                      setOpenPdcInputModal(false);\n                      return Swal.fire({\n                        text: \"Please provide branch!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                        checkBranchRef.current?.focus();\n                      });\n                    }\n                    if (stateModalPdcCheck.Check_No.length >= 40) {\n                      return Swal.fire({\n                        text: \"Check No is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n                    if (stateModalPdcCheck.Check_Amnt.length >= 200) {\n                      return Swal.fire({\n                        text: \"Check Amount is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n                    if (stateModalPdcCheck.Branch.length >= 45) {\n                      return Swal.fire({\n                        text: \"Branch is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n\n                    if (stateModalPdcCheck.Check_Remarks.length >= 220) {\n                      return Swal.fire({\n                        text: \"Remarks is too long!\",\n                        icon: \"warning\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      }).then(() => {\n                        flushSync(() => {\n                          setOpenPdcInputModal(true);\n                        });\n                      });\n                    }\n\n                    stateModalPdcCheck.Check_Amnt = parseFloat(\n                      stateModalPdcCheck.Check_Amnt.toString().replace(/,/g, \"\")\n                    ).toLocaleString(\"en-US\", {\n                      style: \"decimal\",\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                    });\n\n                    stateModalPdcCheck.Check_Date = new Date(\n                      stateModalPdcCheck.Check_Date\n                    ).toLocaleDateString(\"en-US\", {\n                      month: \"2-digit\",\n                      day: \"2-digit\",\n                      year: \"numeric\",\n                    });\n                    const checkContainer: any = [];\n                    if (\n                      !isNaN(parseInt(stateModalPdcCheck.Check_Count)) &&\n                      parseInt(stateModalPdcCheck.Check_Count) > 0 &&\n                      state.checkMode !== \"update\"\n                    ) {\n                      for (\n                        let i = 0;\n                        i < parseInt(stateModalPdcCheck.Check_Count);\n                        i++\n                      ) {\n                        let CheckIdx = (\n                          pdcDataRows.length > 0\n                            ? parseInt(\n                                (pdcDataRows[pdcDataRows.length - 1] as any)\n                                  .CheckIdx\n                              ) +\n                              (i + 1)\n                            : i\n                        ).toString();\n\n                        const currentDate = new Date(\n                          stateModalPdcCheck.Check_Date\n                        );\n                        currentDate.setMonth(currentDate.getMonth() + i);\n                        const data: any = {\n                          CheckIdx,\n                          Check_No: incrementStringNumbers(\n                            stateModalPdcCheck.Check_No,\n                            i\n                          ),\n                          Check_Date: currentDate.toLocaleDateString(\"en-US\", {\n                            month: \"2-digit\",\n                            day: \"2-digit\",\n                            year: \"numeric\",\n                          }),\n                          Check_Amnt: stateModalPdcCheck.Check_Amnt,\n                          BankName: stateModalPdcCheck.BankName,\n                          BankCode: stateModalPdcCheck.BankCode,\n                          Branch: stateModalPdcCheck.Branch,\n                          Check_Remarks: stateModalPdcCheck.Check_Remarks,\n                          Deposit_Slip: stateModalPdcCheck.Deposit_Slip,\n                          DateDeposit: stateModalPdcCheck.DateDeposit,\n                          OR_No: stateModalPdcCheck.OR_No,\n                        };\n\n                        if (\n                          state.checkMode !== \"update\" &&\n                          pdcDataRows\n                            .map((item: any) => item.Check_No)\n                            .includes(data.Check_No)\n                        ) {\n                          setOpenPdcInputModal(false);\n                          return Swal.fire({\n                            text: \"Check is already exist!\",\n                            icon: \"warning\",\n                            showCancelButton: false,\n                            timer: 1500,\n                          }).then(() => {\n                            flushSync(() => {\n                              setOpenPdcInputModal(true);\n                            });\n                            checkNoRef.current?.focus();\n                          });\n                        }\n\n                        checkContainer.push(data);\n                      }\n                      setPdcDataRows((d: any) => {\n                        d = [...d, ...checkContainer];\n                        return d;\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(false);\n                      });\n                      Swal.fire({\n                        text: \"Create New Check Successfully\",\n                        icon: \"success\",\n                        showCancelButton: false,\n                        timer: 1500,\n                      });\n\n                      return;\n                    }\n\n                    function incrementStringNumbers(\n                      str: string,\n                      increment: number\n                    ) {\n                      let num = parseInt(str);\n                      num = num + increment;\n                      return num.toString().padStart(str.length, \"0\");\n                    }\n\n                    setPdcDataRows((dt: any) => {\n                      let CheckIdx = \"\";\n                      if (dt.length <= 0) {\n                        CheckIdx = \"0\";\n                      } else if (state.checkMode === \"update\") {\n                        CheckIdx = stateModalPdcCheck.CheckIdx;\n                      } else {\n                        CheckIdx = (\n                          parseInt(dt[dt.length - 1].CheckIdx) + 1\n                        ).toString();\n                      }\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"CheckIdx\",\n                        value: CheckIdx,\n                      });\n\n                      const data: any = {\n                        Check_No: stateModalPdcCheck.Check_No,\n                        Check_Date: stateModalPdcCheck.Check_Date,\n                        Check_Amnt: stateModalPdcCheck.Check_Amnt,\n                        BankName: stateModalPdcCheck.BankName,\n                        BankCode: stateModalPdcCheck.BankCode,\n                        Branch: stateModalPdcCheck.Branch,\n                        Check_Remarks: stateModalPdcCheck.Check_Remarks,\n                        Deposit_Slip: stateModalPdcCheck.Deposit_Slip,\n                        DateDeposit: stateModalPdcCheck.DateDeposit,\n                        OR_No: stateModalPdcCheck.OR_No,\n                      };\n                      if (state.checkMode === \"update\") {\n                        dt = dt.map((items: any) => {\n                          if (items.CheckIdx === CheckIdx) {\n                            items = { ...items, ...data };\n                          }\n                          return items;\n                        });\n                      } else {\n                        dt = [...dt, { CheckIdx, ...data }];\n                      }\n                      return dt;\n                    });\n\n                    setOpenPdcInputModal(false);\n\n                    Swal.fire({\n                      text:\n                        state.checkMode === \"update\"\n                          ? \"Check Update Successfully\"\n                          : \"Create New Check Successfully\",\n                      icon: \"success\",\n                      showCancelButton: false,\n                      timer: 1500,\n                    }).then(() => {\n                      if (state.checkMode !== \"update\") {\n                        var currentDate = new Date(\n                          stateModalPdcCheck.Check_Date\n                        );\n                        currentDate.setMonth(currentDate.getMonth() + 1);\n\n                        dispatchModalPdcCheck({\n                          type: \"UPDATE_FIELD\",\n                          field: \"Check_Date\",\n                          value: currentDate,\n                        });\n                      }\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_Amnt\",\n                        value: parseFloat(\n                          stateModalPdcCheck.Check_Amnt.replace(/,/g, \"\")\n                        ),\n                      });\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"Check_No\",\n                        value:\n                          state.checkMode === \"update\"\n                            ? stateModalPdcCheck.Check_No\n                            : incrementCheckNo(stateModalPdcCheck.Check_No),\n                      });\n                      dispatchModalPdcCheck({\n                        type: \"UPDATE_FIELD\",\n                        field: \"checkMode\",\n                        value: \"\",\n                      });\n                      flushSync(() => {\n                        setOpenPdcInputModal(true);\n                      });\n                      checkModalSaveButtonActionRef.current.focusVisible();\n                    });\n                  }\n                }}\n              >\n                {state.checkMode === \"update\" ? \"Update\" : \"Save\"}\n              </Button>\n              {state.checkMode === \"update\" && (\n                <Button\n                  color=\"error\"\n                  variant=\"contained\"\n                  onClick={() => {\n                    flushSync(() => {\n                      setOpenPdcInputModal(false);\n                    });\n                    Swal.fire({\n                      title: \"Are you sure?\",\n                      text: `Delete Check ${stateModalPdcCheck.Check_No} `,\n                      icon: \"warning\",\n                      showCancelButton: true,\n                      confirmButtonColor: \"#3085d6\",\n                      cancelButtonColor: \"#d33\",\n                      confirmButtonText: \"Yes, delete it!\",\n                    }).then((result) => {\n                      if (!result.isConfirmed) {\n                        table.current?.removeSelection();\n                        setOpenPdcInputModal(false);\n                        dispatch({\n                          type: \"UPDATE_FIELD\",\n                          field: \"checkMode\",\n                          value: \"\",\n                        });\n                        return;\n                      }\n\n                      setPdcDataRows((dt) => {\n                        dt = dt.filter(\n                          (items: any) =>\n                            items.CheckIdx !== stateModalPdcCheck.CheckIdx\n                        );\n                        return dt;\n                      });\n                      dataGridFunctions.current?.removeSelection();\n                      dispatch({\n                        type: \"UPDATE_FIELD\",\n                        field: \"checkMode\",\n                        value: \"\",\n                      });\n                    });\n                  }}\n                >\n                  Delete\n                </Button>\n              )}\n              <Button\n                color=\"success\"\n                variant=\"contained\"\n                onClick={() => {\n                  table.current?.removeSelection();\n                  setOpenPdcInputModal(false);\n                  setNewStateValue(\n                    dispatchModalPdcCheck,\n                    modalPdcCheckInititalState\n                  );\n                  dispatch({\n                    type: \"UPDATE_FIELD\",\n                    field: \"checkMode\",\n                    value: \"\",\n                  });\n                }}\n              >\n                Cancel\n              </Button>\n              <IconButton\n                style={{\n                  position: \"absolute\",\n                  top: \"10px\",\n                  right: \"10px\",\n                }}\n                aria-label=\"search-client\"\n                onClick={() => {\n                  table.current?.removeSelection();\n                  setOpenPdcInputModal(false);\n                  dispatch({\n                    type: \"UPDATE_FIELD\",\n                    field: \"checkMode\",\n                    value: \"\",\n                  });\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n            </div>\n          </div>\n        </Box>\n      </Modal>\n      <div\n        style={{\n          display: showModal ? \"flex\" : \"none\",\n          position: \"absolute\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          background: \"rgba(158, 155, 157, 0.31)\",\n          zIndex: \"999\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            width: \"90%\",\n            height: \"90%\",\n          }}\n        >\n          <div\n            style={{\n              width: \"90%\",\n              height: \"90%\",\n              overflow: \"auto\",\n              background: \"white\",\n              padding: \"20px\",\n              margin: \"auto\",\n              zIndex: \"9929\",\n              boxShadow: \" -1px 1px 13px 6px rgba(0,0,0,0.54)\",\n              position: \"relative\",\n            }}\n          >\n            <div\n              style={{\n                height: \"100%\",\n                width: \"100%\",\n                position: \"relative\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n              }}\n            >\n              <IconButton\n                sx={{\n                  position: \"absolute\",\n                  right: \"5px\",\n                  top: \"5px\",\n                }}\n                onClick={() => {\n                  setShowModal(false);\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n              <div\n                style={{\n                  width: \"100%\",\n                  height: \"500px\",\n                  border: isDragging ? \"5px dashed green\" : \"5px dashed grey\",\n                  overflow: \"auto\",\n                  padding: \"10px\",\n                }}\n                onDragEnter={handleDragEnter}\n                onDragOver={(e) => e.preventDefault()}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n              >\n                <div\n                  id=\"upload-container\"\n                  style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: \"flex\",\n                    gap: \"10px\",\n                    flexWrap: \"wrap\",\n                  }}\n                  onDragEnter={handleDragEnter}\n                  onDragOver={(e) => e.preventDefault()}\n                  onDragLeave={handleDragLeave}\n                  onDrop={handleDrop}\n                >\n                  {selectedFiles.map((itm, idx) => {\n                    return (\n                      <DisplayFile\n                        key={idx}\n                        itm={itm}\n                        selectedFiles={selectedFiles}\n                        setSelectedFiles={setSelectedFiles}\n                        fileInput={fileInputRef}\n                      />\n                    );\n                  })}\n                </div>\n                {selectedFiles.length <= 0 && (\n                  <div\n                    style={{\n                      position: \"absolute\",\n                      top: \"50%\",\n                      left: \"50%\",\n                      transform: \"translate(-50%,-50%)\",\n                      textAlign: \"center\",\n                    }}\n                  >\n                    <DriveFolderUploadIcon\n                      sx={{ fontSize: \"20em\", color: \"#64748b\" }}\n                    />\n                  </div>\n                )}\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  multiple\n                  style={{ display: \"none\", background: \"white\" }}\n                  id=\"input-file\"\n                  onChange={(e) => {\n                    const fileList = e.target.files as FileList;\n                    const files = Array.from(fileList);\n                    const newFiles = [...selectedFiles, ...files];\n                    if (checkFile(newFiles)) {\n                      return alert(\"file is not valid Extention!\");\n                    }\n                    setSelectedFiles(newFiles);\n                  }}\n                />\n              </div>\n              <div\n                style={{\n                  width: \"100%\",\n                }}\n              >\n                <Button\n                  fullWidth\n                  onClick={() => {\n                    const inputFile = document.getElementById(\"input-file\");\n                    inputFile?.click();\n                  }}\n                >\n                  CLick it to upload\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport function setNewStateValue(dispatch: any, obj: any) {\n  Object.entries(obj).forEach(([field, value]) => {\n    dispatch({ type: \"UPDATE_FIELD\", field, value });\n  });\n}\nexport function incrementCheckNo(Check_No: string) {\n  if (Check_No === undefined || Check_No === null || Check_No === \"\") {\n    return \"001\";\n  }\n\n  let incrementedNumber = (parseInt(Check_No) + 1).toString();\n  while (incrementedNumber.length < Check_No.length) {\n    incrementedNumber = \"0\" + incrementedNumber;\n  }\n  return incrementedNumber;\n}\n"],"names":["initialState","Sub_Ref_No","Ref_No","PNo","IDNo","Date","Name","Remarks","PDC_Status","Deposit_Slip","DateDeposit","OR_No","search","pdcMode","checkMode","sub_account","Acronym","modalPdcCheckInititalState","CheckIdx","BankName","BankCode","Branch","Check_Date","Check_No","Check_Amnt","Check_Remarks","Check_Count","reducer","state","action","type","_objectSpread","_defineProperty","field","value","pdcColumn","headerName","width","flex","minWidth","hide","pdcSearchColumn","pdcBanksColumn","queryKey","quertKeyPDCSearch","PostDateChecks","_queryFn","_mutationFn","_mutationFn2","_onSuccess","_handleOnSave","_refParent$current","refParent","useRef","_React$useState","React","_React$useState2","_slicedToArray","anchorEl","setAnchorEl","open","Boolean","_useState","useState","_useState2","isDragging","setIsDragging","_useState3","_useState4","selectedFiles","setSelectedFiles","_useState5","_useState6","pdcDataRows","setPdcDataRows","_useState7","_useState8","openPdcInputModal","setOpenPdcInputModal","_useState9","_useState10","showModal","setShowModal","_useReducer","useReducer","_useReducer2","dispatch","_useReducer3","_useReducer4","stateModalPdcCheck","dispatchModalPdcCheck","_useContext","useContext","AuthContext","myAxios","user","dataGridFunctions","fileInputRef","savePDCButtonRef","openIdsButtonRef","checkNoRef","checkBankRef","checkBranchRef","checkAmountRef","checkDateRef","checkModalSaveButton","checkModalSaveButtonActionRef","pdcSearchInput","bankSearchInput","queryClient","useQueryClient","table","_useQuery","useQuery","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","get","headers","Authorization","concat","accessToken","abrupt","sent","stop","apply","arguments","refetchOnWindowFocus","onSuccess","res","response","data","RefNo","pdcID","newRefNumberLoading","isLoading","refetchNewRefNumber","refetch","_useMutation","useMutation","mutationKey","mutationFn","_x","_callee2","variables","_context2","mode","post","success","invalidateQueries","setNewStateValue","Swal","position","icon","title","message","showConfirmButton","timer","mutate","loadingAddNew","_useMutation2","_x2","_callee3","_context3","_x3","_callee5","_formatDataToDocument","_response$data$upload","uploadFiles","newObjContainerBasic","fileSelected","formatDataToDocument","_context6","_x4","_x5","_callee4","dataDocument","url","newObjContainer","_loop","index","_context5","basicItem","mainURL","blob","file","reader","_context4","uniqueFilename","fetch","File","fileName","fileType","FileReader","push","Promise","resolve","reject","onload","event","onerror","Error","name","readAsDataURL","length","delegateYield","alert","getSearchPDCCheck","upload","JSON","parse","process","all","map","item","idx","closeModalSearchPDC","mutateSelectedSearch","isLoadingSelectedSearch","_useQueryModalTable","useQueryModalTable","link","queryUrlName","columns","uniqueId","responseDataKey","onSelected","selectedRowData","_selectedRowData$0$Na","_selectedRowData$0$re","console","log","client_id","remarks","closeModalSearchPdcIDs","searchRef","ModalSearchPdcIDs","ModalComponent","openModalSearchPdcIDs","openModal","closeModal","isLoadingModalSearchPdcIDs","_useQueryModalTable2","Bank","Bank_Code","closeModalSearchBanks","ModalSearchBanks","openModalSearchBanks","isLoadingModalSearchbanks","_useQueryModalTable3","ref_no","onCloseFunction","ModalSearchPDC","openModalSearchPDC","isLoadingModalSearchPDC","handleInputChange","e","_e$target","target","handleModalInputChange","_e$target2","handleDragLeave","preventDefault","handleDragEnter","handleDrop","_fileInputRef$current","fileList","dataTransfer","files","Array","from","newFiles","_toConsumableArray","checkFile","current","click","isDisableField","_jsxs","style","display","flexDirection","height","children","_jsx","Box","sx","theme","alignItems","columnGap","breakpoints","down","marginBottom","LoadingButton","loading","TextField","label","size","onChange","onKeyDown","code","InputProps","fontSize","top","Button","variant","startIcon","AddIcon","id","color","onClick","ref","_x6","_callee6","filePromises","fileTransfer","fileToSave","stateSubmited","_context7","_loop2","i","_event$target","datakey","fileContent","result","then","setTimeout","_openIdsButtonRef$cur","checks","stringify","codeCondfirmationAlert","isUpdate","cb","userCodeConfirmation","saveCondfirmationAlert","isConfirm","disabled","SaveIcon","CloseIcon","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","_checkNoRef$current","getLastCheck_No","incrementCheckNo","flushSync","focus","undefined","currentTarget","backgroundColor","grey","Menu","onClose","MenuListProps","MenuItem","localStorage","removeItem","setItem","header","window","elementString","ReactDOMServer","textAlign","padding","marginTop","margin","rowGap","gap","border","borderRadius","FormControl","fullWidth","background","zIndex","InputLabel","htmlFor","OutlinedInput","_savePDCButtonRef$cur","readOnly","endAdornment","InputAdornment","IconButton","edge","RestartAltIcon","CustomDatePicker","_savePDCButtonRef$cur2","textField","InputLabelProps","_savePDCButtonRef$cur3","_openIdsButtonRef$cur2","PersonSearchIcon","_savePDCButtonRef$cur4","_savePDCButtonRef$cur5","DownloadIcon","getBoundingClientRect","overflowX","Table","rows","table_id","isSingleSelection","isRowFreeze","dataSelection","selection","_checkModalSaveButton","rowSelected","filter","focusVisible","timeout","_table$current","dt","removeSelection","clearTimeout","Modal","_table$current2","left","transform","bgcolor","p","Typography","component","_checkModalSaveButton2","inputRef","PolicyIcon","_checkModalSaveButton3","multiline","_checkModalSaveButton4","_checkModalSaveButton5","placeholder","onBlur","parseFloat","replace","toFixed","_checkModalSaveButton6","inputComponent","NumericFormatCustom","includes","_checkModalSaveButton7","inputProps","min","pattern","justifyContent","autoFocus","_table$current3","modalCheckAddUpdate","_checkNoRef$current2","_checkNoRef$current3","parseInt","isNaN","_checkAmountRef$curre","_checkBankRef$current","_checkBranchRef$curre","toString","toLocaleString","minimumFractionDigits","maximumFractionDigits","toLocaleDateString","month","day","year","checkContainer","currentDate","setMonth","getMonth","incrementStringNumbers","_checkNoRef$current4","d","str","increment","num","padStart","items","_dataGridFunctions$cu","_table$current4","_table$current5","right","_table$current6","bottom","overflow","boxShadow","onDragEnter","onDragOver","onDragLeave","onDrop","flexWrap","itm","DisplayFile","fileInput","DriveFolderUploadIcon","multiple","inputFile","document","getElementById","obj","Object","entries","forEach","_ref3","_ref4","incrementedNumber"],"sourceRoot":""}