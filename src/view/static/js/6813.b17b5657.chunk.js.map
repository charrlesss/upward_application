{"version":3,"file":"static/js/6813.b17b5657.chunk.js","mappings":"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","sources":["feautures/Admin/Dashboard.tsx"],"sourcesContent":["import React, { useEffect, useState, forwardRef, useRef } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { myAxios } from \"../../lib/axios\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../components/AuthContext\";\nimport \"../../style/dashboard.css\";\nimport _ from \"lodash\";\n\n\nexport default function Dashboard() {\n  const { user } = useContext(AuthContext);\n  const { data: renewalData, isLoading: isLoadingRenewal } = useQuery({\n    queryKey: \"renewal-by-month\",\n    queryFn: async () =>\n      await myAxios.get(\"/get-renewal-this-month\", {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n  });\n  const { data: claimsData, isLoading: isLoadingClaims } = useQuery({\n    queryKey: \"claims-notice\",\n    queryFn: async () =>\n      await myAxios.get(\"/get-claims-notice\", {\n        headers: {\n          Authorization: `Bearer ${user?.accessToken}`,\n        },\n      }),\n  });\n   // style={{border:\"1px solid red\" ,height:\"500px\" ,background:\"#D3D3D3\"}}\n  return (\n    <div id=\"main\" >\n\n   {(user?.userAccess === \"PRODUCTION\" ||\n        user?.userAccess === \"ACCOUNTING\" ||\n        user?.userAccess === \"PRODUCTION_ACCOUNTING\" ||\n        user?.userAccess === \"ADMIN\") && (\n        <div className=\"section-content\">\n          <h1 className=\"first\">RENEWAL</h1>\n          <div id=\"content\">\n            {isLoadingRenewal ? (\n              <div>Loading...</div>\n            ) : (\n              <table id=\"table\">\n                <tbody>\n                  {renewalData?.data.renewal?.length <= 0 && (\n                    <tr className=\"header first\">\n                      <td>Name</td>\n                      <td>POLICY NO</td>\n                      <td>SUM INSURED</td>\n                      <td>DATE TO</td>\n                      <td>CHASSIS</td>\n                      <td>UNIT</td>\n                    </tr>\n                  )}\n                  {renewalData?.data.renewal?.map((itm: any, idx: number) => {\n                    return (\n                      <React.Fragment key={idx}>\n                        {itm.isHeader ? (\n                          <>\n                            <tr className=\"heading first\">\n                              <td colSpan={6}>{itm.header}</td>\n                            </tr>\n                            <tr className=\"header first\">\n                              <td colSpan={itm.isVPolicy === \"1\" ? 1 : 2}>\n                                Name\n                              </td>\n                              <td colSpan={itm.isVPolicy === \"1\" ? 1 : 2}>\n                                POLICY NO\n                              </td>\n                              <td>SUM INSURED</td>\n                              <td>DATE TO</td>\n                              {itm.isVPolicy === \"1\" && (\n                                <>\n                                  <td>CHASSIS</td>\n                                  <td>UNIT</td>\n                                </>\n                              )}\n                            </tr>\n                          </>\n                        ) : (\n                          <tr>\n                            <td colSpan={itm.isVPolicy === \"1\" ? 1 : 2}>\n                              {itm.AssuredName}\n                            </td>\n                            <td colSpan={itm.isVPolicy === \"1\" ? 1 : 2}>\n                              {itm.PolicyNo}\n                            </td>\n                            <td>{itm.InsuredValue}</td>\n                            <td>{itm.DateExpired}</td>\n                            {itm.isVPolicy === \"1\" && (\n                              <>\n                                <td>{itm.ChassisNo}</td>\n                                <td>{itm.unit}</td>\n                              </>\n                            )}\n                          </tr>\n                        )}\n                      </React.Fragment>\n                    );\n                  })}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n      )}\n      {(user?.userAccess === \"CLAIMS\" || user?.userAccess === \"ADMIN\") && (\n        <div className=\"section-content\">\n          <h1 className=\"second\">CLAIMS</h1>\n          <div id=\"content\">\n            {isLoadingClaims ? (\n              <div>Loading...</div>\n            ) : (\n              <table id=\"table\">\n                <tbody>\n                  <tr className=\"header second\">\n                    <td>Claims ID.</td>\n                    <td>Name</td>\n                    <td>Policy No.</td>\n                    <td>Date Accident</td>\n                    <td>Date Reported</td>\n                    <td>Claim Type</td>\n                    <td>Status</td>\n                  </tr>\n                  {claimsData?.data.claims?.map((itm: any, idx: number) => {\n                    return (\n                      <tr key={idx}>\n                        <td>{itm.claims_id}</td>\n                        <td>{itm.AssuredName}</td>\n                        <td>{itm.PolicyNo}</td>\n                        <td>{itm.dateAccident}</td>\n                        <td>{itm.dateReported}</td>\n                        <td>{itm.claim_type}</td>\n                        <td>{itm.status}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n      )} \n    </div>\n  );\n}\n// function formatData(data: any) {\n//   return data.map((itm: any) => {\n//     itm.PrevBalance = parseFloat(itm.PrevBalance.toString().replace(/,/g, \"\"));\n//     itm.CurrCredit = parseFloat(itm.CurrCredit.toString().replace(/,/g, \"\"));\n//     itm.CurrDebit = parseFloat(itm.CurrDebit.toString().replace(/,/g, \"\"));\n//     itm.TotalBalance = parseFloat(\n//       itm.TotalBalance.toString().replace(/,/g, \"\")\n//     );\n//     return itm;\n//   });\n// }\n\n// function formatNumber(num: any) {\n//   const formattedPrice = new Intl.NumberFormat(\"en-US\", {\n//     minimumFractionDigits: 2,\n//     maximumFractionDigits: 2,\n//   }).format(num);\n\n//   return formattedPrice;\n// }\n// const GroupedReport = forwardRef(({ data }: any, ref: any) => {\n//   data = formatData(data);\n//   // Group by \"H\"\n//   const groupedByH = _.groupBy(data, \"H\");\n\n//   function getSum(data: any, property: string) {\n//     const totalPrice = data.reduce(\n//       (total: any, product: any) => total + product[property],\n//       0\n//     );\n\n//     return totalPrice;\n//   }\n\n//   return (\n//     <div ref={ref}>\n//       {Object.keys(groupedByH).map((groupHKey) => {\n//         const groupHT1 = _.groupBy(groupedByH[groupHKey], \"HT1\"); // Group by \"HT1\" inside each \"H\" group\n//         const groupTotalH1 = Object.values(groupHT1).flat();\n\n//         return (\n//           <div key={groupHKey} className={`H`}>\n//             <p\n//               style={{ margin: 0, padding: \"10px\", color: \"black\" }}\n//               className=\"p\"\n//             >\n//               {groupHKey}\n//             </p>\n//             {Object.keys(groupHT1).map((groupHT1Key) => {\n//               const groupHT2 = _.groupBy(groupHT1[groupHT1Key], \"HT2\");\n//               const groupTotal = Object.values(groupHT2).flat();\n//               return (\n//                 <div\n//                   key={groupHT1Key}\n//                   style={{ marginLeft: \"20px\" }}\n//                   className={`HT1`}\n//                 >\n//                   <p\n//                     style={{ margin: 0, padding: \"10px\", color: \"black\" }}\n//                     className=\"p\"\n//                   >\n//                     {groupHT1Key}\n//                   </p>\n//                   {Object.keys(groupHT2).map((groupHT2Key) => {\n//                     return (\n//                       <div\n//                         key={groupHT2Key}\n//                         style={{ marginLeft: \"40px\" }}\n//                         className={`HT2`}\n//                       >\n//                         <p\n//                           style={{ margin: 0, padding: \"10px\", color: \"black\" }}\n//                           className=\"p\"\n//                         >\n//                           {groupHT2Key}\n//                         </p>\n//                         {groupHT2[groupHT2Key].map((item, index) => (\n//                           <div\n//                             key={index}\n//                             style={{ marginLeft: \"60px\", display: \"flex\" }}\n//                             className=\"p\"\n//                           >\n//                             <div style={{ width: \"400px\" }}>{item.HT3}</div>\n//                             <div style={{ width: \"150px\", textAlign: \"right\" }}>\n//                               {formatNumber(item.PrevBalance)}\n//                             </div>\n//                             <div style={{ width: \"150px\", textAlign: \"right\" }}>\n//                               {formatNumber(item.CurrDebit)}\n//                             </div>\n//                             <div style={{ width: \"150px\", textAlign: \"right\" }}>\n//                               {formatNumber(item.CurrCredit)}\n//                             </div>\n//                             <div style={{ width: \"150px\", textAlign: \"right\" }}>\n//                               {formatNumber(item.TotalBalance)}\n//                             </div>\n//                           </div>\n//                         ))}\n//                         <div\n//                           style={{\n//                             marginLeft: \"60px\",\n//                             display: \"flex\",\n//                           }}\n//                           className=\"p\"\n//                         >\n//                           <div\n//                             style={{ width: \"400px\", textAlign: \"left\" }}\n//                           ></div>\n//                           <div\n//                             style={{\n//                               width: \"150px\",\n//                               borderTop: \"1px solid #94a3b8\",\n//                               textAlign: \"right\",\n//                               fontWeight: \"bold\",\n//                             }}\n//                           >\n//                             {formatNumber(\n//                               getSum(groupHT2[groupHT2Key], \"PrevBalance\")\n//                             )}\n//                           </div>\n//                           <div\n//                             style={{\n//                               width: \"150px\",\n//                               textAlign: \"right\",\n//                               fontWeight: \"bold\",\n//                               borderTop: \"1px solid #94a3b8\",\n//                             }}\n//                           >\n//                             {formatNumber(\n//                               getSum(groupHT2[groupHT2Key], \"CurrDebit\")\n//                             )}\n//                           </div>\n//                           <div\n//                             style={{\n//                               width: \"150px\",\n//                               textAlign: \"right\",\n//                               fontWeight: \"bold\",\n//                               borderTop: \"1px solid #94a3b8\",\n//                             }}\n//                           >\n//                             {formatNumber(\n//                               getSum(groupHT2[groupHT2Key], \"CurrCredit\")\n//                             )}\n//                           </div>\n//                           <div\n//                             style={{\n//                               width: \"150px\",\n//                               textAlign: \"right\",\n//                               fontWeight: \"bold\",\n//                               borderTop: \"1px solid #94a3b8\",\n//                             }}\n//                           >\n//                             {formatNumber(\n//                               getSum(groupHT2[groupHT2Key], \"TotalBalance\")\n//                             )}\n//                           </div>\n//                         </div>\n//                       </div>\n//                     );\n//                   })}\n//                   <div\n//                     style={{\n//                       marginLeft: \"20px\",\n//                       display: \"flex\",\n//                       padding: \"10px 0px\",\n//                     }}\n//                     className=\"p\"\n//                   >\n//                     <div style={{ width: \"480px\", textAlign: \"left\" }}>\n//                       <p style={{ margin: 0, padding: 0, color: \"black\" }}>\n//                         TOTAL {groupHT1Key}\n//                       </p>\n//                     </div>\n//                     <div\n//                       style={{\n//                         width: \"150px\",\n//                         textAlign: \"right\",\n//                         fontWeight: \"bold\",\n//                         borderBottom: \"1px solid black\",\n//                       }}\n//                     >\n//                       {formatNumber(getSum(groupTotal, \"PrevBalance\"))}\n//                     </div>\n//                     <div\n//                       style={{\n//                         width: \"150px\",\n//                         textAlign: \"right\",\n//                         fontWeight: \"bold\",\n//                         borderBottom: \"1px solid black\",\n//                       }}\n//                     >\n//                       {formatNumber(getSum(groupTotal, \"CurrDebit\"))}\n//                     </div>\n//                     <div\n//                       style={{\n//                         width: \"150px\",\n//                         textAlign: \"right\",\n//                         fontWeight: \"bold\",\n//                         borderBottom: \"1px solid black\",\n//                       }}\n//                     >\n//                       {formatNumber(getSum(groupTotal, \"CurrCredit\"))}\n//                     </div>\n//                     <div\n//                       style={{\n//                         width: \"150px\",\n//                         textAlign: \"right\",\n//                         fontWeight: \"bold\",\n//                         borderBottom: \"1px solid black\",\n//                       }}\n//                     >\n//                       {formatNumber(getSum(groupTotal, \"TotalBalance\"))}\n//                     </div>\n//                   </div>\n//                 </div>\n//               );\n//             })}\n//             <div\n//               style={{\n//                 display: \"flex\",\n//                 padding: \"10px 0px\",\n//               }}\n//               className=\"p\"\n//             >\n//               <div style={{ width: \"520px\", textAlign: \"left\" }}>\n//                 <p style={{ margin: 0, padding: 0, color: \"black\" }}>\n//                   TOTAL{\" \"}\n//                   {groupHKey !== \"ASSETS\"\n//                     ? groupHKey + \"AND CAPITAL\"\n//                     : groupHKey}\n//                 </p>\n//               </div>\n//               <div\n//                 style={{\n//                   width: \"150px\",\n//                   textAlign: \"right\",\n//                   fontWeight: \"bold\",\n//                   borderBottom: \"double black 5px\",\n//                 }}\n//               >\n//                 {formatNumber(getSum(groupTotalH1, \"PrevBalance\"))}\n//               </div>\n//               <div\n//                 style={{\n//                   width: \"150px\",\n//                   textAlign: \"right\",\n//                   fontWeight: \"bold\",\n//                   borderBottom: \"double black 5px\",\n//                 }}\n//               >\n//                 {formatNumber(getSum(groupTotalH1, \"CurrDebit\"))}\n//               </div>\n//               <div\n//                 style={{\n//                   width: \"150px\",\n//                   textAlign: \"right\",\n//                   fontWeight: \"bold\",\n//                   borderBottom: \"double black 5px\",\n//                 }}\n//               >\n//                 {formatNumber(getSum(groupTotalH1, \"CurrCredit\"))}\n//               </div>\n//               <div\n//                 style={{\n//                   width: \"150px\",\n//                   textAlign: \"right\",\n//                   fontWeight: \"bold\",\n//                   borderBottom: \"double black 5px\",\n//                 }}\n//               >\n//                 {formatNumber(getSum(groupTotalH1, \"TotalBalance\"))}\n//               </div>\n//             </div>\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// });\n\n// function convertElementToURL(page: Element) {\n//   const elements = page as Element;\n//   console.log(elements.getBoundingClientRect());\n//   const elementString = new XMLSerializer().serializeToString(elements);\n//   const height = elements.getBoundingClientRect().height;\n//   const width = elements.getBoundingClientRect().width;\n//   const viewBox = `0 0 ${width} ${height}`;\n//   let scale = 100;\n\n//   const dataURL =\n//     \"data:image/svg+xml,\" +\n//     encodeURIComponent(\n//       `<svg xmlns=\"http://www.w3.org/2000/svg\"  width=\"${scale}%\" height=\"${scale}%\">\n//           <foreignObject viewBox=\"${viewBox}\" width=\"100%\" height=\"100%\">\n//               ${elementString}\n//           </foreignObject>\n//           <style>\n//               .page{\n//                   page-break-after: always;\n//                   display: flex;\n//                   flex-direction: column;\n//                   height: 100vh;\n//                   width: 100vw;\n//               }\n//               img{\n//                   width: 100%;\n//                   height: 100%;\n//               }\n//           </style> \n//         </svg>`\n//     );\n//   return dataURL;\n// }\n\n// export default function Dashboard() {\n//   const report = useRef<HTMLDivElement>(null);\n//   const { user } = useContext(AuthContext);\n//   const [data, setData] = useState([]);\n//   const handleClick = async () => {\n//     const state = {\n//       dateFormat: \"Monthly\",\n//       format: 0,\n//       date: \"2024-09-05T05:56:21.669Z\",\n//       sub_acct: \"All\",\n//       nominalAccount: 0,\n//     };\n//     const response = await myAxios.post(\n//       \"/reports/accounting//balance-sheet-long-report\",\n//       state,\n//       {\n//         headers: {\n//           Authorization: `Bearer ${user?.accessToken}`,\n//         },\n//       }\n//     );\n//     const jsonData = await response.data;\n//     setData(jsonData.data);\n//   };\n//   const handleLogic = () => {\n//     const loopThroughChildren = (elements: Array<HTMLElement>) => {\n//       const F_EL = elements[0];\n//       const L_EL = elements[elements.length - 1];\n\n//       let _EH = 0;\n//       const _EL_C = [];\n//       elements.forEach((child: HTMLElement, index) => {\n//         const _H = Math.round(child.getBoundingClientRect().height);\n//         _EH += _H;\n//         if (_EH + _H > 900) {\n//           _EH = 0;\n//           _EL_C.push(child);\n//           _EL_C.push(elements[index + 1]);\n//           console.log(`============ ${index} - ${_EH} ================`, child);\n//         }\n//       });\n\n//       _EL_C.unshift(F_EL);\n//       _EL_C.push(L_EL);\n\n//       const formatArrayToObjects = (arr: any) => {\n//         let formattedArray = [];\n\n//         // Loop through the array in steps of 2\n//         for (let i = 0; i < arr.length; i += 2) {\n//           formattedArray.push({\n//             start: arr[i],\n//             end: arr[i + 1],\n//           });\n//         }\n\n//         return formattedArray;\n//       };\n//       const formatted = formatArrayToObjects(_EL_C);\n//       const pageCuts = document.getElementById(\"cut-pages\");\n//       const div = document.createElement(\"div\");\n//       div.className = \"main\";\n//       formatted.forEach((itm) => {\n//         const page = document.createElement(\"div\");\n//         page.className = \"page\";\n//         page.style.height = \"11in\";\n//         page.style.width = \"auto\";\n//         page.style.fontSize = \"8px !important\";\n//         page.style.padding = \"15px\";\n//         const range = document.createRange();\n\n//         range.setStartBefore(itm.start);\n//         range.setEndAfter(itm.end);\n//         const cutContent = range.cloneContents();\n//         range.deleteContents();\n//         page.appendChild(cutContent);\n//         div.appendChild(page);\n//       });\n//       pageCuts?.appendChild(div);\n//     };\n//     const dd = report.current?.querySelectorAll(\".p\") as any;\n//     loopThroughChildren(dd);\n//   };\n\n//   const captureElement = async (page: Element) => {\n//     const imgData = convertElementToURL(page);\n//     const tableIamge = '<img src=\"' + imgData + '\" />';\n//     return `<div class=\"page\">${tableIamge}</div>`;\n//   };\n\n//   async function getPaperToPrint() {\n//     let printString = \"\";\n//     const pages: any = document.querySelectorAll(\"#cut-pages .page\");\n\n//     for (const page of pages) {\n//       page.style.fontSize = \"8px !important\";\n//       printString += await captureElement(page);\n//     }\n//     return printString;\n//   }\n\n//   return (\n//     <div>\n//       <button onClick={handleClick}>Report</button>\n//       <button\n//         onClick={async () => {\n//           await getPaperToPrint().then((printString) => {\n//             const iframe = document.createElement(\n//               \"iframe\"\n//             ) as HTMLIFrameElement;\n//             iframe.style.display = \"none\";\n//             document.body.appendChild(iframe);\n//             const iframeDocument =\n//               iframe.contentDocument || iframe.contentWindow?.document;\n//             const htmlContent = `\n//                           <!DOCTYPE html>\n//                           <html lang=\"en\">\n//                           <head>\n//                               <meta charset=\"UTF-8\">\n//                               <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//                               <title>Printed HTML Content</title>\n//                               <style>\n//                               @import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\n//                               @media print {\n//                                 @page{\n//                                     margin-top: 0mm;\n//                                     margin-bottom: 0mm;\n//                                     margin-left: 0mm;\n//                                     margin-right: 0mm;\n//                                 }\n//                                 body {\n//                                       margin: 0;\n//                                       padding: 0;\n//                                   }\n//                                 .page{\n//                                     page-break-after: always;\n//                                     height: 100vh;\n//                                     width: 100vw;\n//                                 }\n                               \n//                                  img{\n//                                     width: 95%;\n//                                     height: 100%;\n//                                 }\n                               \n//                               }\n          \n//                               </style>\n//                           </head>\n//                           <body>\n//                                 ${printString}\n//                           </body>\n//                           </html>\n//                       `;\n//             iframeDocument?.open();\n//             iframeDocument?.write(htmlContent);\n//             iframeDocument?.close();\n//             setTimeout(function () {\n//               iframe.contentWindow?.print();\n//               iframe.parentNode?.removeChild(iframe);\n//             }, 1000);\n//           });\n//         }}\n//       >\n//         Report Element\n//       </button>\n//       <button onClick={handleLogic}>Logic</button>\n//       <GroupedReport data={data} ref={report} />\n//       <div id=\"cut-pages\"></div>\n//     </div>\n//   );\n// }\n"],"names":["Dashboard","_queryFn","_queryFn2","_renewalData$data$ren","_renewalData$data$ren2","_claimsData$data$clai","user","useContext","AuthContext","_useQuery","useQuery","queryKey","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","myAxios","get","headers","Authorization","concat","accessToken","abrupt","sent","stop","apply","arguments","renewalData","data","isLoadingRenewal","isLoading","_useQuery2","_callee2","_context2","claimsData","isLoadingClaims","_jsxs","id","children","userAccess","className","_jsx","renewal","length","map","itm","idx","React","isHeader","_Fragment","colSpan","header","isVPolicy","AssuredName","PolicyNo","InsuredValue","DateExpired","ChassisNo","unit","claims","claims_id","dateAccident","dateReported","claim_type","status"],"sourceRoot":""}